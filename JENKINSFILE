pipeline{
    agent any
    
    stages{
        stage('Get Code'){
            steps{
                //Obtener cÃ³digo del repo
                git 'https://github.com/marcusroses/P1_UNIR_MRA'
            }
        }

        stage('Unit'){
            steps{
                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                    bat '''
                        set PYTONPATH=%WORKSPACE%
                        python -m pytest --junitxml=result-unit.xml test\\unit
                    '''
                    junit 'result*.xml'
                }
            }
        } 
        
        stage('Rest'){
            steps{
                bat '''
                    set FLASK_APP=app\\api.py
                    set FLASK_ENV=development
                    start python -m flask run
                    start java -jar C:\\CODI\\unir\\P1_B\\wiremock\\wiremock-standalone-3.3.1.jar --port 9090 --root-dir C:\\CODI\\unir\\P1_B\\test\\wiremock
                    set PYTONPATH=%WORKSPACE%   
                    python -m pytest --junitxml=result-rest.xml test\\rest
                '''
            }
        }
        
        stage('Coverage'){
            steps{
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    bat '''
                    set PYTONPATH=%WORKSPACE%
                    python -m coverage run --branch --source=app --omit=app\\__init__.py,app\\api.py -m pytest test\\unit"
                    python -m coverage xml
                    '''
                    cobertura coberturaReportFile: 'coverage.xml', conditionalCoverageTargets: '90, 80, 0', lineCoverageTargets: '95, 85, 0'
                }                
            }            
        }        
        
        stage('Static'){
            steps{
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    bat '''
                    set PYTONPATH=%WORKSPACE%
                    python -m flake8 --exit-zero --format=pylint app>flake8.out
                    '''
                    recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: [[threshold: 8, type: 'TOTAL', unstable: true], [threshold: 10, type: 'TOTAL', unstable: false]]
                }
            }            
        }      
        
        stage('Performace'){
            steps{
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    bat '''
                    C:\\CODI\\UNIR\\apache-jmeter-5.6.3\\bin\\jmeter -n -t test\\jmeter\\P1_B.jmx -f -l flask.jtl
                    '''
                    perfReport sourceDataFiles: 'flask.jtl'
                }
            }            
        }        
                
        
        stage('Security'){
            steps{
                catchError() {
                    bat '''
                    set PYTONPATH=%WORKSPACE%
                    python -m bandit --exit-zero -r . -f custom -o bandit.out --severity-level medium --msg-template "{abspath}:{line}: {severity}: {test_id}: {msg}"
                    '''
                    recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates: [[threshold: 2, type: 'TOTAL', unstable: true], [threshold: 4, type: 'TOTAL', unstable: false]]
                }
            }            
        }  
        
    }    
}
